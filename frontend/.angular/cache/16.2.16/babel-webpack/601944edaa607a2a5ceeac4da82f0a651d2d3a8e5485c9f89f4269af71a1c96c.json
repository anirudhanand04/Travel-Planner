{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nclass AuthService {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser = this.currentUserSubject.asObservable();\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(email, password) {\n    return this.apiService.getUserByEmail(email).pipe(tap(user => {\n      // In a real app, you'd validate the password on the server\n      if (user) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n      }\n    }));\n  }\n  register(user) {\n    return this.apiService.createUser(user).pipe(tap(createdUser => {\n      localStorage.setItem('currentUser', JSON.stringify(createdUser));\n      this.currentUserSubject.next(createdUser);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  isLoggedIn() {\n    return !!this.currentUserValue;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.ApiService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","apiService","currentUserSubject","currentUser","asObservable","storedUser","localStorage","getItem","next","JSON","parse","currentUserValue","value","login","email","password","getUserByEmail","pipe","user","setItem","stringify","register","createUser","createdUser","logout","removeItem","isLoggedIn","i0","ɵɵinject","i1","ApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\an1anand\\JUnit-Testing\\Travel-Planner\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { User } from '../models/models';\r\nimport { ApiService } from './api.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n    public currentUser = this.currentUserSubject.asObservable();\r\n\r\n    constructor(private apiService: ApiService) {\r\n        const storedUser = localStorage.getItem('currentUser');\r\n        if (storedUser) {\r\n            this.currentUserSubject.next(JSON.parse(storedUser));\r\n        }\r\n    }\r\n\r\n    public get currentUserValue(): User | null {\r\n        return this.currentUserSubject.value;\r\n    }\r\n\r\n    login(email: string, password: string): Observable<User> {\r\n        return this.apiService.getUserByEmail(email).pipe(\r\n            tap(user => {\r\n                // In a real app, you'd validate the password on the server\r\n                if (user) {\r\n                    localStorage.setItem('currentUser', JSON.stringify(user));\r\n                    this.currentUserSubject.next(user);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    register(user: User): Observable<User> {\r\n        return this.apiService.createUser(user).pipe(\r\n            tap(createdUser => {\r\n                localStorage.setItem('currentUser', JSON.stringify(createdUser));\r\n                this.currentUserSubject.next(createdUser);\r\n            })\r\n        );\r\n    }\r\n\r\n    logout(): void {\r\n        localStorage.removeItem('currentUser');\r\n        this.currentUserSubject.next(null);\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return !!this.currentUserValue;\r\n    }\r\n}"],"mappings":"AACA,SAASA,eAAe,QAAwB,MAAM;AACtD,SAASC,GAAG,QAAoB,gBAAgB;;;AAIhD,MAGaC,WAAW;EAIpBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAHtB,KAAAC,kBAAkB,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAM,WAAW,GAAG,IAAI,CAACD,kBAAkB,CAACE,YAAY,EAAE;IAGvD,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACZ,IAAI,CAACH,kBAAkB,CAACM,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAAC;;EAE5D;EAEA,IAAWM,gBAAgBA,CAAA;IACvB,OAAO,IAAI,CAACT,kBAAkB,CAACU,KAAK;EACxC;EAEAC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACjC,OAAO,IAAI,CAACd,UAAU,CAACe,cAAc,CAACF,KAAK,CAAC,CAACG,IAAI,CAC7CnB,GAAG,CAACoB,IAAI,IAAG;MACP;MACA,IAAIA,IAAI,EAAE;QACNZ,YAAY,CAACa,OAAO,CAAC,aAAa,EAAEV,IAAI,CAACW,SAAS,CAACF,IAAI,CAAC,CAAC;QACzD,IAAI,CAAChB,kBAAkB,CAACM,IAAI,CAACU,IAAI,CAAC;;IAE1C,CAAC,CAAC,CACL;EACL;EAEAG,QAAQA,CAACH,IAAU;IACf,OAAO,IAAI,CAACjB,UAAU,CAACqB,UAAU,CAACJ,IAAI,CAAC,CAACD,IAAI,CACxCnB,GAAG,CAACyB,WAAW,IAAG;MACdjB,YAAY,CAACa,OAAO,CAAC,aAAa,EAAEV,IAAI,CAACW,SAAS,CAACG,WAAW,CAAC,CAAC;MAChE,IAAI,CAACrB,kBAAkB,CAACM,IAAI,CAACe,WAAW,CAAC;IAC7C,CAAC,CAAC,CACL;EACL;EAEAC,MAAMA,CAAA;IACFlB,YAAY,CAACmB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACvB,kBAAkB,CAACM,IAAI,CAAC,IAAI,CAAC;EACtC;EAEAkB,UAAUA,CAAA;IACN,OAAO,CAAC,CAAC,IAAI,CAACf,gBAAgB;EAClC;;;uBA3CSZ,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX/B,WAAW;MAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;SAETlC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}